#! /usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function


import argparse
from argparse import RawTextHelpFormatter
import os
import shutil
import cv2
import numpy as np

from deep_ocr.utils import extract_peek_ranges_from_array
from deep_ocr.utils import median_split_ranges
from deep_ocr.utils import merge_chars_into_line_segments

from deep_ocr.cv2_img_proc import PreprocessBackgroundMask
from deep_ocr.cv2_img_proc import PreprocessResizeKeepRatio

from deep_ocr.id_cards.segmentation import Segmentation



if __name__ == "__main__":

    description = '''
        # Docker config
        CAFFE_MODEL=/opt/deep_ocr/data/trained_models/mnist_model
        DEEP_OCR_ROOT=/opt/deep_ocr

        # PC
        CAFFE_MODEL=/root/data/deep_ocr_trained_models/mnist_model
        DEEP_OCR_ROOT=/root/workspace/deep_ocr

        deep_ocr_id_card_segmentation --img $DEEP_OCR_ROOT/data/id_card_img.jpg \
            --debug_path /tmp/debug

        deep_ocr_id_card_segmentation --img ~/data/id_card_front \
            --debug_path /tmp/debug
    '''

    parser = argparse.ArgumentParser(
        description=description, formatter_class=RawTextHelpFormatter)
    parser.add_argument('--img', dest='img',
                        default=None, required=True,
                        help='id card image to reco')
    parser.add_argument('--debug_path', dest='debug_path',
                        default=None, required=False,
                        help='debug path')
    options = parser.parse_args()

    path_img = os.path.expanduser(options.img)
    debug_path = os.path.expanduser(options.debug_path)
    if debug_path is not None:
        if os.path.isdir(debug_path):
            shutil.rmtree(debug_path)
        os.makedirs(debug_path)
    norm_width = 600
    norm_height = 600

    if os.path.isfile(path_img):
        id_card_img = cv2.imread(path_img)
        preprocess_resize = PreprocessResizeKeepRatio(norm_width, norm_height)
        id_card_img = preprocess_resize.do(id_card_img)    
        segmentation = Segmentation(debug_path)
        segmentation.do(id_card_img)
    elif os.path.isdir(path_img):
        filenames = os.listdir(path_img)
        for filename in filenames:
            if filename.lower().endswith(".jpg"):
                print("process filename=", filename)
                debug_path_filename = None
                if debug_path is not None:
                    debug_path_filename = os.path.join(debug_path, filename)
                each_path_img = os.path.join(path_img, filename)
                id_card_img = cv2.imread(each_path_img)
                preprocess_resize = PreprocessResizeKeepRatio(norm_width, norm_height)
                id_card_img = preprocess_resize.do(id_card_img)    
                segmentation = Segmentation(debug_path_filename)
                segmentation.do(id_card_img)